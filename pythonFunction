# Functions
'''A function is a block of code which only runs when it is called. You can pass data,known as parameter, into a function. A function can get data as a result.'''
# creating a function 
# in python a function is created using the def keywsord 
def my_function (fName):
  print ("hello from a function")
my_function ("hello from a function")
  # creating a function 
# call a function, use the function name followed by parenthesis 
def my_Function (fname):
  print (fname + "Joaquin")
my_Function ("pizza")                                                                      # PARAMETERS OR ARGUMENTS 
#the terms parameter and argument can be used for the same thing; info that are passed into a function 
# a parameter is the variable listed inside the paranthesis in the function definition 
# an argument is a value that is sent to the function when it's called 
def my_function (fname,lname):
  print (fname + " " + lname)
my_function ("Carlos","Campuzano")
# Python Class 
# to create a class, use keyword class 
# create a class named MyClass, with a property named x: 
class MyClass: 
  x=5

# Create an object 
# we can use the class name MyClass to create an object 
# create an object named g1, and print the value of x 
g1 = MyClass () 
print (g1.x)
# the _init_ () function 
# use the underscore _init_ () function to assign values for name and age : 

# example create a class named Person, use the _init_(function) to assign values for name and age 
class Person (): 
  def __init__(self,name,age): 
    self.name=name
    self.age = age 
g1=Person ("john", 36)
print(g1.name)
print (g1.age)
# note the _init_() function is called automatically everytime the class is being used to create a new object 
# python inheritance 
# inheritance allows us to define a class that inherites all the methods and properties from another class
# parent class is the class being inherited from, also called based class 
# child class is the class that inherits from another class, also called derived class 
# any class can be a parent, so syntax is the same as creating another class 
# ex: create a class named Person, with firstname and lastname properties, and a printname method
class Person (): # Parent class
  def _init_ (self,fname,lname):
    self.firstname = fname
    self.lastname=lname 
def print (self): # child class 
  print (self.firstname, self.lastname)
  # use the person class to create an object, and then execute the printname method 
x= Person ("John", "Doe")
x.printname()
# child class 
# to create a class that inherits the functionality from another class, send the parent class as a parameter when creating the child class 
# ex. assignment prompt: create a class named student which will inherit the properties and methods from the Person class 
class Student (Person):
  pass 
#ex: use the student class to create an object, and then execute the printname method 
  x = student ("Mike","Olsen")
x.printname()
